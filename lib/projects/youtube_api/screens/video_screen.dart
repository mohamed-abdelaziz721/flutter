import 'package:flutter/material.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';

class VideoScreen extends StatefulWidget {
  final String id;
  VideoScreen({required this.id});

  @override
  _VideoScreenState createState() => _VideoScreenState();
}

class _VideoScreenState extends State<VideoScreen> {
  late YoutubePlayerController _controller;

  Future<void> getCaption(String id) async {
    final yt = YoutubeExplode();
    // var trackManifest = await yt.videos.closedCaptions.getManifest(id);
    // var trackInfo = trackManifest.getByLanguage('en');
    // if (trackInfo != null)
    // {
    //   // Get the actual closed caption track.
    //   var track = await yt.videos.closedCaptions.get(trackInfo);
    //
    //   // Get the caption displayed at 1:01
    //   var caption = track.getByTime(Duration(seconds: 61));
    //   var text = caption?.text; // "And the game was afoot."
    // }
    var manifest = await yt.videos.closedCaptions.getManifest(widget.id);
    var trackInfo = manifest.getByLanguage('en', autoGenerated: true);
    var track = await yt.videos.closedCaptions.get(trackInfo.first);

    // var caption = track.getByTime(const Duration(
    //     hours: 0, // ignore: avoid_redundant_argument_values
    //     minutes: 1,
    //     seconds: 48)); // ignore: avoid_redundant_argument_values

    // expect(caption?.text, 'But what if you don't have a captions file');

    var tt = trackInfo.iterator;
    if (trackInfo != null) {
      while (tt.moveNext()) {
        var track = await yt.videos.closedCaptions.get(tt.current);
        // captions = track.toJson();
        for (var e in track.captions) {
          print(e.text);
          //print(e.offset); //time offset
          //e.end Time at which this caption ends being displayed.
          // e.offset Time at which this caption starts being displayed.
        }
      }
    }


    yt.close();
    // return track.captions;
  }

  @override
  void initState() {
    super.initState();

    _controller = YoutubePlayerController(
      initialVideoId: widget.id,
      flags: YoutubePlayerFlags(
        mute: false,
        autoPlay: false,
        captionLanguage: 'en',
        enableCaption: true,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Column(
        children: [
          YoutubePlayer(
            controller: _controller,
            showVideoProgressIndicator: true,
            onReady: () {
              print('Player is ready.');
            },
          ),
          const SizedBox(height: 5),
          MaterialButton(
            minWidth: double.infinity,
            height: 30,
            onPressed: () {
              getCaption(widget.id);
            },
            color: const Color(0xff0095FF),
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(50)),
            child: const Text(
              "Get Caption",
              style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                  fontSize: 18),
            ),
          ),
          // SingleChildScrollView(
          //   reverse: true,
          //   child: Container(
          //     width: 300,
          //     height: 200,
          //     color: Colors.grey,
          //     padding: const EdgeInsets.fromLTRB(10.0, 10.0, 10.0, 10.0),
          //     child: Text('masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h masodafj fmed;asfm ,kffmdlf, kfadsfjj fdsfdasf sfsfsaf sfdsgbgnghr sdgsdg gsfddddddddg dfdgsgfg f gfdg fsd g fs fd h fgh fg h gf h g h j hj h'),
          //   ),
          // ),

          Container(
            width: 300,
            height: 200,
            color: Colors.grey,
            child: SingleChildScrollView(
              scrollDirection: Axis.vertical,
              //.horizontal
              padding: const EdgeInsets.fromLTRB(10.0, 10.0, 10.0, 10.0),
              child: Text(
                "1 Description that is too long in text format(Here Data is coming from API)  " +
                    "2 Description that is too long in text format(Here Data is coming from API)  " +
                    "3 Description that is too long in text format(Here Data is coming from API) " +
                    "4 Description that is too long in text format(Here Data is coming from API) " +
                    "5 Description that is too long in text format(Here Data is coming from API)  " +
                    "6 Description that is too long in text format(Here Data is coming from API) " +
                    "7 Description that is too long in text format(Here Data is coming from API) " +
                    "8 Description that is too long in text format(Here Data is coming from API)" +
                    "9 Description that is too long in text format(Here Data is coming from API)" +
                    "10 Description that is too long in text format(Here Data is coming from API)",
                style: TextStyle(
                  fontSize: 16.0,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
